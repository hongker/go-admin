// Code generated by MockGen. DO NOT EDIT.
// Source: app/services/user.go

package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/quangdangfit/go-admin/app/models"
	schema "github.com/quangdangfit/go-admin/app/schema"
	reflect "reflect"
)

// MockIUserService is a mock of IUserService interface
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return _m.recorder
}

// GetUserByID mocks base method
func (_m *MockIUserService) GetUserByID(ctx context.Context, id string) (*models.User, error) {
	ret := _m.ctrl.Call(_m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID
func (_mr *MockIUserServiceMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetUserByID", reflect.TypeOf((*MockIUserService)(nil).GetUserByID), arg0, arg1)
}

// List mocks base method
func (_m *MockIUserService) List(ctx context.Context, queryParam *schema.UserQueryParam) (*[]models.User, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, queryParam)
	ret0, _ := ret[0].(*[]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockIUserServiceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockIUserService)(nil).List), arg0, arg1)
}
